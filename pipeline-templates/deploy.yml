parameters:
  serviceConnection:
  location:
  folderPath:
  subscriptionId:
  vmImageName:
  environmentName:
  fileName: 
  artifactStorageAccountName:
  artifactStorageAccountRG:
  artifactStorageAccountContainer:
jobs:
- deployment: Deploy
  displayName: 'Deploy to Subscription'
  continueOnError: false
  workspace:
    clean: outputs 
  pool:
    vmImage: ${{ parameters.vmImageName }}
  environment: ${{ parameters.environmentName }}
  strategy:
    runOnce:
      deploy: 
        steps:
        - download: none
        - task: DownloadBuildArtifacts@0
          condition: succeeded()
          displayName: "Downloading ${{ parameters.environmentName }} Artifacts"
          inputs:
            buildType: "current"
            downloadType: "single"
            artifactName: "${{ parameters.environmentName }}"
            downloadPath: "$(System.ArtifactsDirectory)"
                         
        - task: AzureResourceManagerTemplateDeployment@3
          displayName: "Deploy to ${{ parameters.environmentName }}"
          condition: succeeded()
          inputs:
            deploymentScope: 'Subscription'
            ConnectedServiceName: ${{ parameters.serviceConnection }}
            location: ${{ parameters.location }}
            templateLocation: 'Linked artifact'
            subscriptionId: ${{ parameters.subscriptionId }}
            csmFile: "$(System.ArtifactsDirectory)/${{ parameters.environmentName }}/${{ parameters.folderPath }}/${{ parameters.fileName }}"
            #overrideParameters: '-environment ${{ parameters.environmentName }}  -subscriptionId ${{ parameters.subscriptionId }} -location ${{ parameters.location }}'
            deploymentMode: 'Incremental'
            deploymentName: "deploy_to_${{ parameters.environmentName }}" 

        - task: AzureCLI@2
          displayName: "Publish to Storage Account"
          condition: succeeded()
          inputs:
            azureSubscription: ${{ parameters.serviceConnection }}
            scriptType: 'pscore'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az  account set -s ${{ parameters.subscriptionId }}  
                            $connectionString = az storage account show-connection-string -n ${{ parameters.artifactStorageAccountName }} -g ${{ parameters.artifactStorageAccountRG }}  --query connectionString -o tsv
                            $isContainerExists = az storage container exists --name ${{ parameters.artifactStorageAccountContainer}} --account-name ${{ parameters.artifactStorageAccountName }} --connection-string $connectionString  --query exists -o tsv
                            $timeStamp  = Get-Date -Format "yyyyMMdd-HHmmss"
                            if($isContainerExists -ne $true){
                              az storage container create --name ${{ parameters.artifactStorageAccountContainer}} --account-name ${{ parameters.artifactStorageAccountName }} --public-access off --connection-string $connectionString 
                            }                            
                            az storage blob upload-batch --destination "${{ parameters.artifactStorageAccountContainer}}\$timeStamp" --source "$(System.ArtifactsDirectory)" --connection-string $connectionString --account-name ${{ parameters.artifactStorageAccountName }} --pattern "*"                      
