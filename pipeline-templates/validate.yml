parameters:
  serviceConnection:
  location: 
  subscriptionId: 
  vmImageName:
  environmentName:
  fileName: 
  folderPath:

jobs:
- job: 'Validation'
  pool:
    vmImage: ${{ parameters.vmImageName }}  
  displayName: 'Run preflight validation'
  continueOnError: false
  workspace:
    clean: outputs 
  steps:
  - checkout: self
    path: ${{ parameters.environmentName }}

  - task: AzureResourceManagerTemplateDeployment@3
    displayName: "Validate ${{ parameters.environmentName }} Deployment"
    inputs:
      deploymentScope: 'Subscription'
      ConnectedServiceName: ${{ parameters.serviceConnection }}
      location: ${{ parameters.location }}
      templateLocation: 'Linked artifact'
      subscriptionId: ${{ parameters.subscriptionId }}
      csmFile: "$(Agent.BuildDirectory)/${{ parameters.environmentName }}/${{ parameters.folderPath }}/${{ parameters.fileName }}"
      #overrideParameters: '-environment "${{ parameters.environmentName }}" -subscriptionId "${{ parameters.subscriptionId }}" -location "${{ parameters.location }}"'
      deploymentMode: 'Validation'
      deploymentName: 'ValidatePipelineTemplate'

  - task: AzureCLI@2
    displayName: "Plan ${{ parameters.environmentName }} Deployment"
    condition: succeeded()
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az  account set -s ${{ parameters.subscriptionId }}  
        az deployment sub what-if \
          --location ${{ parameters.location }} \
          --template-file "$(Agent.BuildDirectory)/${{ parameters.environmentName }}/${{ parameters.folderPath }}/${{ parameters.fileName }}"  
           #\--parameters environment=${{ parameters.environmentName }}  subscriptionId=${{ parameters.subscriptionId }} location=${{ parameters.location }}

  - task: PowerShell@2
    name: "Copy_Artifacts"
    displayName: "Copy ${{ parameters.environmentName }} Artifacts"
    inputs:
      targetType: 'inline'
      script: |
          # Define the path to the bicep file
          $bicepFilePath = "$(Agent.BuildDirectory)/${{ parameters.environmentName }}/${{ parameters.folderPath }}/${{ parameters.fileName }}"

          # Read the file content into a variable
          #$fileContent = Get-Content -Path $bicepFilePath -Raw
          $fileContent = Get-Content -Path $bicepFilePath
           $filteredContent = @()
            foreach ($line in $fileContent) {
              if (!$line.StartsWith("//")) {
                $filteredContent += $line
              }
            }
          $fileContent = $filteredContent -join [Environment]::NewLine
          # Use regular expression to extract the trailing characters of the word "components"
          $trailingCharacters = [regex]::Matches($fileContent, 'components(.{1,})') | % { $_.Groups[1].Value }
          $moduleNames = @()
          foreach($string in $trailingCharacters){
              $start = $string.IndexOf("/") + 1
              $end   = $string.LastIndexOf("/")
              $moduleNames += $string.Substring($start, $end - $start)
          }
          $paths = @()
          $destination = "$(Build.ArtifactStagingDirectory)"
          foreach ($moduleName in $moduleNames) {
              $paths += "$(Agent.BuildDirectory)/${{ parameters.environmentName }}/components/$moduleName"
              # Copy each folder to the destination             
                  Get-ChildItem $paths -Recurse | ForEach-Object {
                      $dest = $_.FullName.Replace($paths, "$destination/components/$moduleName")
                      if (!(Test-Path (Split-Path $dest))) {
                          New-Item (Split-Path $dest) -ItemType Directory | Out-Null
                      }     
                      Write-Output "Copying file $_ to $dest"
                      Copy-Item $_.FullName $dest -Recurse
                  }
                  $paths = @()
          }
          $mainPath= @()
          $mainPath += "$(Agent.BuildDirectory)/${{ parameters.environmentName }}/${{ parameters.folderPath }}"
              Get-ChildItem "$(Agent.BuildDirectory)/${{ parameters.environmentName }}/${{ parameters.folderPath }}" -Recurse | ForEach-Object {
                  $dest = $_.FullName.Replace($mainPath, "$destination/${{ parameters.folderPath }}")
                  if (!(Test-Path (Split-Path $dest))) {
                      New-Item (Split-Path $dest) -ItemType Directory | Out-Null
                  }
                  Write-Output "Copying file $_ to $dest"
                  Copy-Item $_.FullName $dest -Recurse
          }
         
       
  - task: PublishBuildArtifacts@1
    condition: succeeded()
    displayName: "Publish ${{ parameters.environmentName }} Artifacts"
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      publishLocation: Container
      ArtifactName: "${{ parameters.environmentName }}"
         


